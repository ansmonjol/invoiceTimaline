{
  "globals": {
    "window": true,
    "localStorage": true,
    "document": true,
    "describe": true,
    "it": true,
    "beforeEach": true
  },
  "env": {
    "es6": true,
    "node": true
  },
  "parserOptions": {
    "ecmaVersion": 6,
    "ecmaFeatures": {
      'generators': true,
      'objectLiteralDuplicateProperties': true,
      'modules': true,
      "jsx": true,
      "spread": true,
      "experimentalObjectRestSpread": true,
    }
  },
  "ecmaFeatures": {
    "jsx": true
  },
  "parser": "babel-eslint",
  "rules": {
    #  enforces no braces where they can be omitted
    #  http://eslint.org/docs/rules/arrow-body-style
    'arrow-body-style': 0,
    // require parens in arrow function arguments
    'arrow-parens': 0,
    #  require space before/after arrow function's arrow
    #  https://github.com/eslint/eslint/blob/master/docs/rules/arrow-spacing.md
    'arrow-spacing': [2, { 'before': true, 'after': true }],
    #  require trailing commas in multiline object literals
    'comma-dangle': [0, 'always-multiline'],
    #  verify super() callings in constructors
    'constructor-super': 2,
    #  enforce the spacing around the * in generator functions
    'generator-star-spacing': ["error", {"before": true, "after": false}],
    #  disallow modifying variables of class declarations
    'no-class-assign': 2,
    #  disallow arrow functions where they could be confused with comparisons
    #  http://eslint.org/docs/rules/no-confusing-arrow
    'no-confusing-arrow': [2, {
      'allowParens': true,
    }],
    # disallow modifying variables that are declared using const
    'no-const-assign': 2,
    #  disallow duplicate class members
    #  http://eslint.org/docs/rules/no-dupe-class-members
    'no-dupe-class-members': 2,
    #  disallow importing from the same path more than once
    #  http://eslint.org/docs/rules/no-duplicate-imports
    'no-duplicate-imports': 2,
    #  disallow symbol constructor
    #  http://eslint.org/docs/rules/no-new-symbol
    'no-new-symbol': 2,
    #  disallow specific globals
    'no-restricted-globals': 2,
    #  disallow specific imports
    #  http://eslint.org/docs/rules/no-restricted-imports
    'no-restricted-imports': 2,
    #  disallow to use this/super before super() calling in constructors.
    'no-this-before-super': 2,
    #  require let or const instead of var
    'no-var': 2,
    #  disallow unnecessary constructor
    #  http://eslint.org/docs/rules/no-useless-constructor
    'no-useless-constructor': 2,
    #  require method and property shorthand syntax for object literals
    #  https://github.com/eslint/eslint/blob/master/docs/rules/object-shorthand.md
    'object-shorthand': [2, 'always'],
    #  suggest using arrow functions as callbacks
    'prefer-arrow-callback': 2,
    #  suggest using of const declaration for variables that are never modified after declared
    'prefer-const': 2,
    #  suggest using the spread operator instead of .apply()
    'prefer-spread': 2,
    #  suggest using Reflect methods where applicable
    'prefer-reflect': 0,
    #  use rest parameters instead of arguments
    #  http://eslint.org/docs/rules/prefer-rest-params
    'prefer-rest-params': 2,
    #  suggest using template literals instead of string concatenation
    #  http://eslint.org/docs/rules/prefer-template
    'prefer-template': 2,
    #  disallow generator functions that do not have yield
    'require-yield': 0,
    #  import sorting
    #  http://eslint.org/docs/rules/sort-imports
    'sort-imports': 0,
    #  enforce usage of spacing in template strings
    #  http://eslint.org/docs/rules/template-curly-spacing
    'template-curly-spacing': 2,
    #  enforce spacing around the * in yield* expressions
    #  http://eslint.org/docs/rules/yield-star-spacing
    'yield-star-spacing': [2, 'after'],


    // enforce return after a callback
    'callback-return': 0,
    // enforces error handling in callbacks (node environment)
    'handle-callback-err': 0,
    // disallow mixing regular variable and require declarations
    'no-mixed-requires': [0, false],
    // disallow use of new operator with the require function
    'no-new-require': 2,
    // disallow string concatenation with __dirname and __filename
    'no-path-concat': 2,
    // disallow process.exit()
    'no-process-exit': 2,
    // restrict usage of specified node modules
    'no-restricted-modules': 0,
    // disallow use of synchronous methods (off by default)
    'no-sync': 0,

    // You should not call require() without arguments or with empty argument
    'require-path-exists/notEmpty': 2,

    // You should pass only one argument to require() function
    'require-path-exists/tooManyArguments': 2,

    // You should only pass existing paths to require()
    'require-path-exists/exists': [ 2, {
      'extensions': [
        '',
        '.js',
        '.jsx',
        '.es.js',
        '.jsx',
        '.json5',
        '.es',
        '.es6',
        '.coffe'
      ],
    }]

  },
  "settings": {
  'import/resolver': {
    "node": {
      "extensions": ['.js', '.jsx', '.json']
    }
  }
  }
}
